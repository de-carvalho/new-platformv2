import AppError from '@shared/errors/AppErrors';

import FakeUsersRepository from '../../repositories/fakes/FakeUserPFRepository';
import UpdateUserPFService from '../UpdateUserPFService';
import CreateUserService from '../CreateUserPFService';
import FakeHashProvider from '../../providers/HashProvider/fakes/FakeHashProvider';

let fakeUsersRepository: FakeUsersRepository;
let fakeHashProvider: FakeHashProvider;
let createUser: CreateUserService;
let updateUser: UpdateUserPFService;

describe('UpdateUserPFService', () => {
  beforeEach(() => {
    fakeUsersRepository = new FakeUsersRepository();
    fakeHashProvider = new FakeHashProvider();
    createUser = new CreateUserService(fakeUsersRepository, fakeHashProvider);
    updateUser = new UpdateUserPFService(fakeUsersRepository, fakeHashProvider);
  });

  it('should be able to update the user data', async () => {
    const createdUser = await createUser.execute({
      firstName: 'John',
      lastName: 'Doe',
      dob: new Date(),
      email: 'johndoe@gmail.com',
      cellphoneArea: '11',
      cellphoneNumber: '99099999399',
      addressStreet: 'Rua de endereço sp',
      addressNumber: '99',
      addressComplement: 'Complemento',
      addressDistrict: 'Jardim Iae',
      addressZipcode: '05890130',
      addressCity: 'São Paulo',
      addressState: 'SP',
      taxDocumentType: 'CPF',
      taxDocumentNumber: '239.000.000-09',
      passwordHash: '123456',
      origens: 'Google',
      credit: 'Marketing',
      value: '4000',
      phoneArea: '11',
      phoneNumber: '099988798',
      accountType: 'PF',
      partnerId: 1,
      moipAccountId: 'asfa98fas',
      moipToken: 'asfas908uas',
      ownId: 'afas908f',
      moipCustomerId: 'asjfsaop',
      role: ' ENTREPRENEUR',
    });

    const user = await updateUser.execute({
      firstName: 'Nome',
      lastName: 'Atualizado',
      gender: 'Masculino',
      profession: 'Programador',
      race: 'Negro',
      dob: new Date('2000-01-10'),
      email: 'dev@gmail.com',
      cellphoneArea: '11',
      cellphoneNumber: '999999999',
      addressStreet: 'Rua de endereço sp',
      addressNumber: '99',
      addressComplement: 'Complemento',
      addressDistrict: 'Jardim Iae',
      addressZipcode: '05890130',
      addressCity: 'São Paulo',
      addressState: 'SP',
      origens: 'Google',
      credit: 'Marketing',
      phoneArea: '11',
      phoneNumber: '099988798',
      bankAccountNumber: '3243',
      bankAccountType: 'CHECKING',
      bankAgencyNumber: '342',
      bankNumber: '2352352',
      identityIssueDate: '2020-04-09',
      identityIssuer: 'RG',
      userId: createdUser.id,
      bankAccountCheckNumber: 12,
      bankAgencyCheckNumber: 23,
    });

    expect(user).toHaveProperty('id');
    expect(user.gender).toBe('Masculino');
  });

  it('should not be able to update a non existing user or when an email that exists was taked', async () => {
    expect(
      updateUser.execute({
        firstName: 'Nome',
        lastName: 'Atualizado',
        gender: 'Masculino',
        profession: 'Programador',
        race: 'Negro',
        dob: new Date('2000-01-10'),
        email: 'dev@gmail.com',
        cellphoneArea: '11',
        cellphoneNumber: '999999999',
        addressStreet: 'Rua de endereço sp',
        addressNumber: '99',
        addressComplement: 'Complemento',
        addressDistrict: 'Jardim Iae',
        addressZipcode: '05890130',
        addressCity: 'São Paulo',
        addressState: 'SP',
        origens: 'Google',
        credit: 'Marketing',
        phoneArea: '11',
        phoneNumber: '099988798',
        bankAccountNumber: '3243',
        bankAccountType: 'CHECKING',
        bankAgencyNumber: '342',
        bankNumber: '2352352',
        identityIssueDate: '2020-04-09',
        identityIssuer: 'RG',
        userId: 44,
        bankAccountCheckNumber: 12,
        bankAgencyCheckNumber: 23,
      }),
    ).rejects.toBeInstanceOf(AppError);

    await createUser.execute({
      firstName: 'John',
      lastName: 'Doe',
      dob: new Date(),
      email: 'dev@gmail.com',
      cellphoneArea: '11',
      cellphoneNumber: '99099999399',
      addressStreet: 'Rua de endereço sp',
      addressNumber: '99',
      addressComplement: 'Complemento',
      addressDistrict: 'Jardim Iae',
      addressZipcode: '05890130',
      addressCity: 'São Paulo',
      addressState: 'SP',
      taxDocumentType: 'CPF',
      taxDocumentNumber: '239.000.000-09',
      passwordHash: '123456',
      origens: 'Google',
      credit: 'Marketing',
      value: '4000',
      phoneArea: '11',
      phoneNumber: '099988798',
      accountType: 'PF',
      partnerId: 1,
      moipAccountId: 'asfa98fas',
      moipToken: 'asfas908uas',
      ownId: 'afas908f',
      moipCustomerId: 'asjfsaop',
      role: ' ENTREPRENEUR',
    });

    const createdUser = await createUser.execute({
      firstName: 'John',
      lastName: 'Doe',
      dob: new Date(),
      email: 'johndoe@gmail.com',
      cellphoneArea: '11',
      cellphoneNumber: '99099999399',
      addressStreet: 'Rua de endereço sp',
      addressNumber: '99',
      addressComplement: 'Complemento',
      addressDistrict: 'Jardim Iae',
      addressZipcode: '05890130',
      addressCity: 'São Paulo',
      addressState: 'SP',
      taxDocumentType: 'CPF',
      taxDocumentNumber: '239.000.000-00',
      passwordHash: '123456',
      origens: 'Google',
      credit: 'Marketing',
      value: '4000',
      phoneArea: '11',
      phoneNumber: '099988798',
      accountType: 'PF',
      partnerId: 1,
      moipAccountId: 'asfa98fas',
      moipToken: 'asfas908uas',
      ownId: 'afas908f',
      moipCustomerId: 'asjfsaop',
      role: ' ENTREPRENEUR',
    });

    expect(
      updateUser.execute({
        firstName: 'Nome',
        lastName: 'Atualizado',
        gender: 'Masculino',
        profession: 'Programador',
        race: 'Negro',
        dob: new Date('2000-01-10'),
        email: 'dev@gmail.com',
        cellphoneArea: '11',
        cellphoneNumber: '999999999',
        addressStreet: 'Rua de endereço sp',
        addressNumber: '99',
        addressComplement: 'Complemento',
        addressDistrict: 'Jardim Iae',
        addressZipcode: '05890130',
        addressCity: 'São Paulo',
        addressState: 'SP',
        origens: 'Google',
        credit: 'Marketing',
        phoneArea: '11',
        phoneNumber: '099988798',
        bankAccountNumber: '3243',
        bankAccountType: 'CHECKING',
        bankAgencyNumber: '342',
        bankNumber: '2352352',
        identityIssueDate: '2020-04-09',
        identityIssuer: 'RG',
        userId: createdUser.id,
        bankAccountCheckNumber: 12,
        bankAgencyCheckNumber: 23,
      }),
    ).rejects.toBeInstanceOf(AppError);
  });

  it('should not be able to update when the password was not confirmed', async () => {
    const createdUser = await createUser.execute({
      firstName: 'John',
      lastName: 'Doe',
      dob: new Date(),
      email: 'johndoe@gmail.com',
      cellphoneArea: '11',
      cellphoneNumber: '99099999399',
      addressStreet: 'Rua de endereço sp',
      addressNumber: '99',
      addressComplement: 'Complemento',
      addressDistrict: 'Jardim Iae',
      addressZipcode: '05890130',
      addressCity: 'São Paulo',
      addressState: 'SP',
      taxDocumentType: 'CPF',
      taxDocumentNumber: '239.000.000-00',
      passwordHash: '123456',
      origens: 'Google',
      credit: 'Marketing',
      value: '4000',
      phoneArea: '11',
      phoneNumber: '099988798',
      accountType: 'PF',
      partnerId: 1,
      moipAccountId: 'asfa98fas',
      moipToken: 'asfas908uas',
      ownId: 'afas908f',
      moipCustomerId: 'asjfsaop',
      role: ' ENTREPRENEUR',
    });

    await expect(
      updateUser.execute({
        firstName: 'Nome',
        lastName: 'Atualizado',
        gender: 'Masculino',
        profession: 'Programador',
        race: 'Negro',
        dob: new Date('2000-01-10'),
        email: 'dev@gmail.com',
        cellphoneArea: '11',
        cellphoneNumber: '999999999',
        addressStreet: 'Rua de endereço sp',
        addressNumber: '99',
        addressComplement: 'Complemento',
        addressDistrict: 'Jardim Iae',
        addressZipcode: '05890130',
        addressCity: 'São Paulo',
        addressState: 'SP',
        origens: 'Google',
        credit: 'Marketing',
        phoneArea: '11',
        phoneNumber: '099988798',
        bankAccountNumber: '3243',
        bankAccountType: 'CHECKING',
        bankAgencyNumber: '342',
        bankNumber: '2352352',
        identityIssueDate: '2020-04-09',
        identityIssuer: 'RG',
        userId: createdUser.id,
        bankAccountCheckNumber: 12,
        bankAgencyCheckNumber: 23,
        passwordHash: '9safa7s0',
      }),
    ).rejects.toBeInstanceOf(AppError);
  });

  it('should not be able to update when the previuos password is wrong', async () => {
    const createdUser = await createUser.execute({
      firstName: 'John',
      lastName: 'Doe',
      dob: new Date(),
      email: 'johndoe@gmail.com',
      cellphoneArea: '11',
      cellphoneNumber: '99099999399',
      addressStreet: 'Rua de endereço sp',
      addressNumber: '99',
      addressComplement: 'Complemento',
      addressDistrict: 'Jardim Iae',
      addressZipcode: '05890130',
      addressCity: 'São Paulo',
      addressState: 'SP',
      taxDocumentType: 'CPF',
      taxDocumentNumber: '239.000.000-00',
      passwordHash: '123456',
      origens: 'Google',
      credit: 'Marketing',
      value: '4000',
      phoneArea: '11',
      phoneNumber: '099988798',
      accountType: 'PF',
      partnerId: 1,
      moipAccountId: 'asfa98fas',
      moipToken: 'asfas908uas',
      ownId: 'afas908f',
      moipCustomerId: 'asjfsaop',
      role: ' ENTREPRENEUR',
    });

    await expect(
      updateUser.execute({
        firstName: 'Nome',
        lastName: 'Atualizado',
        gender: 'Masculino',
        profession: 'Programador',
        race: 'Negro',
        dob: new Date('2000-01-10'),
        email: 'dev@gmail.com',
        cellphoneArea: '11',
        cellphoneNumber: '999999999',
        addressStreet: 'Rua de endereço sp',
        addressNumber: '99',
        addressComplement: 'Complemento',
        addressDistrict: 'Jardim Iae',
        addressZipcode: '05890130',
        addressCity: 'São Paulo',
        addressState: 'SP',
        origens: 'Google',
        credit: 'Marketing',
        phoneArea: '11',
        phoneNumber: '099988798',
        bankAccountNumber: '3243',
        bankAccountType: 'CHECKING',
        bankAgencyNumber: '342',
        bankNumber: '2352352',
        identityIssueDate: '2020-04-09',
        identityIssuer: 'RG',
        userId: createdUser.id,
        bankAccountCheckNumber: 12,
        bankAgencyCheckNumber: 23,
        passwordHash: '9safa7s0',
        oldPassword: 'rqwrw',
      }),
    ).rejects.toBeInstanceOf(AppError);
  });

  it('should not be able to update when the password confirmation is wrong', async () => {
    const createdUser = await createUser.execute({
      firstName: 'John',
      lastName: 'Doe',
      dob: new Date(),
      email: 'johndoe@gmail.com',
      cellphoneArea: '11',
      cellphoneNumber: '99099999399',
      addressStreet: 'Rua de endereço sp',
      addressNumber: '99',
      addressComplement: 'Complemento',
      addressDistrict: 'Jardim Iae',
      addressZipcode: '05890130',
      addressCity: 'São Paulo',
      addressState: 'SP',
      taxDocumentType: 'CPF',
      taxDocumentNumber: '239.000.000-00',
      passwordHash: '123456',
      origens: 'Google',
      credit: 'Marketing',
      value: '4000',
      phoneArea: '11',
      phoneNumber: '099988798',
      accountType: 'PF',
      partnerId: 1,
      moipAccountId: 'asfa98fas',
      moipToken: 'asfas908uas',
      ownId: 'afas908f',
      moipCustomerId: 'asjfsaop',
      role: ' ENTREPRENEUR',
    });

    expect(
      updateUser.execute({
        firstName: 'Nome',
        lastName: 'Atualizado',
        gender: 'Masculino',
        profession: 'Programador',
        race: 'Negro',
        dob: new Date('2000-01-10'),
        email: 'dev@gmail.com',
        cellphoneArea: '11',
        cellphoneNumber: '999999999',
        addressStreet: 'Rua de endereço sp',
        addressNumber: '99',
        addressComplement: 'Complemento',
        addressDistrict: 'Jardim Iae',
        addressZipcode: '05890130',
        addressCity: 'São Paulo',
        addressState: 'SP',
        origens: 'Google',
        credit: 'Marketing',
        phoneArea: '11',
        phoneNumber: '099988798',
        bankAccountNumber: '3243',
        bankAccountType: 'CHECKING',
        bankAgencyNumber: '342',
        bankNumber: '2352352',
        identityIssueDate: '2020-04-09',
        identityIssuer: 'RG',
        userId: createdUser.id,
        bankAccountCheckNumber: 12,
        bankAgencyCheckNumber: 23,
        oldPassword: '123456',
        passwordHash: '123123',
        passwordConfirmation: '4232523',
      }),
    ).rejects.toBeInstanceOf(AppError);
  });

  it('should be able to update when the password confirmation is correct', async () => {
    const createdUser = await createUser.execute({
      firstName: 'John',
      lastName: 'Doe',
      dob: new Date(),
      email: 'johndoe@gmail.com',
      cellphoneArea: '11',
      cellphoneNumber: '99099999399',
      addressStreet: 'Rua de endereço sp',
      addressNumber: '99',
      addressComplement: 'Complemento',
      addressDistrict: 'Jardim Iae',
      addressZipcode: '05890130',
      addressCity: 'São Paulo',
      addressState: 'SP',
      taxDocumentType: 'CPF',
      taxDocumentNumber: '239.000.000-00',
      passwordHash: '123456',
      origens: 'Google',
      credit: 'Marketing',
      value: '4000',
      phoneArea: '11',
      phoneNumber: '099988798',
      accountType: 'PF',
      partnerId: 1,
      moipAccountId: 'asfa98fas',
      moipToken: 'asfas908uas',
      ownId: 'afas908f',
      moipCustomerId: 'asjfsaop',
      role: ' ENTREPRENEUR',
    });

    expect(
      await updateUser.execute({
        firstName: 'Nome',
        lastName: 'Atualizado',
        gender: 'Masculino',
        profession: 'Programador',
        race: 'Negro',
        dob: new Date('2000-01-10'),
        email: 'dev@gmail.com',
        cellphoneArea: '11',
        cellphoneNumber: '999999999',
        addressStreet: 'Rua de endereço sp',
        addressNumber: '99',
        addressComplement: 'Complemento',
        addressDistrict: 'Jardim Iae',
        addressZipcode: '05890130',
        addressCity: 'São Paulo',
        addressState: 'SP',
        origens: 'Google',
        credit: 'Marketing',
        phoneArea: '11',
        phoneNumber: '099988798',
        bankAccountNumber: '3243',
        bankAccountType: 'CHECKING',
        bankAgencyNumber: '342',
        bankNumber: '2352352',
        identityIssueDate: '2020-04-09',
        identityIssuer: 'RG',
        userId: createdUser.id,
        bankAccountCheckNumber: 12,
        bankAgencyCheckNumber: 23,
        oldPassword: '123456',
        passwordHash: '4232523',
        passwordConfirmation: '4232523',
      }),
    ).toHaveProperty('id');
  });
});
